/// @title Antikythera
/// @author @vex_0x
/// @dev GLHF

#include "huffmate/utils/Shuffling.huff"

////////////////////////////////////////////////////////////////
//                         INTERFACE                          //
////////////////////////////////////////////////////////////////

/// @notice Returns the name of the puzzle
#define function name() view returns (string memory)
/// @notice Verifies that a solution is valid for the puzzle
#define function verify(uint256 _start, uint256 _solution) nonpayable returns (bool)
/// @notice Generates the puzzle's starting position based on a seed.
#define function generate(address _seed) view returns (uint256)

/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⢿⣿⣿⣿⣿⣟⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣷⣤⣿⣿⣿⣿⣿⣿⣿⣭⣁⠀⠀⣨⣭⣿⣿⣿⣿⣿⣿⣿⡟⠛⣿⣿⣿⣿
/// ⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣆⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⡿⠿⠟⠉⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⣿⣆⠀⢀⣨⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠈⠻⣿⣿⣿⣿⡋⠀⢿⣿⣿⣿
/// ⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣤⣄⡀⠀⠀⢀⣤⣼⣿⣿⣷⣿⣿⣿⣿⣿
/// ⣿⣿⣿⡟⢻⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣆⢠⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣄⣰⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⠏⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⣿⣿⣿⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠛⠁⠀⢹⣿⣿⣿⣿⣿
/// ⣿⣿⣿⣿⣿⡿⠀⠀⠈⠉⢉⣿⣿⣿⡿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠙⠿⣿⣿⣿
/// ⣿⣿⣿⣿⡟⠁⠀⠀⠀⢠⣿⣿⣿⠀⠀⢿⣿⣿⣿⣿⣿⡆⠀⣠⣴⣶⣿⣷⣿⣿
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣦⣼⣿⣿⣿⣾⣿⣷⣿⣿⣿⣿⣿⣇⣾⣿⣿⡏⢹⣿⣿⣿
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡋⢛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

// Unique upper nibbles for selectors: [0x00 (name), 0x02 (generate), 0x04 (verify)]
#define jumptable__packed TABLE = {
    name generate verify
}

/// @dev Entry point
#define macro MAIN() = takes (0) returns (0) {
    __tablestart(TABLE)         // [table_start]
    0x00 calldataload 0xfc shr  // [upper_selector_nibble, table_start]
    dup1 0x04 lt                // [upper_selector_nibble < 0x04, upper_selector_nibble, table_start]
    fail jumpi                  // [upper_selector_nibble, table_start]
    add                         // [table_start + index]
    0x02 swap1                  // [table_start + index, 0x02]
    0x1E                        // [mem_ptr, table_start + index, 0x02]
    codecopy                    // []
    0x00 mload jump             // []

    name:
        // dev: Returns
        NAME()
    generate:
        // dev: Returns
        0x04 calldataload       // [_seed]
        GENERATE()
    verify:
        // dev: Returns
        VERIFY(ret_false)
    fail:
        0x00 0x00 revert
    ret_false:
        false 0x00 mstore
        0x20 0x00 return
}

///       wWWWw               wWWWw
/// vVVVv (___) wWWWw         (___)  vVVVv
/// (___)  ~Y~  (___)  vVVVv   ~Y~   (___)
///  ~Y~   \|    ~Y~   (___)    |/    ~Y~
///  \|   \ |/   \| /  \~Y~/   \|    \ |/
/// \\|// \\|// \\|/// \\|//  \\|// \\\|///
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/// @notice Returns the name of the puzzle
#define macro NAME() = takes (0) returns (0) {
    0x0B416E74696B797468657261 // ["Antikythera"]
    0x2B mstore                // []
    0x20 0x00 mstore           // []
    msize 0x00 return          // []
}

///   _____
///  |A .  | _____
///  | /.\ ||A ^  | _____
///  |(_._)|| / \ ||A _  | _____
///  |  |  || \ / || ( ) ||A_ _ |
///  |____V||  .  ||(_'_)||( v )|
///         |____V||  |  || \ / |
///                |____V||  .  |
///                       |____V|

/// @notice Generates the puzzle's starting position based on a seed.
/// @dev The seed is intended to be `msg.sender` of some wrapper function or
/// call.
/// @param _seed The seed to use to generate the puzzle.
/// @return The puzzle's starting position.
#define macro GENERATE() = takes (1) returns (0) {
    // Input:            [_seed]

    0x00 mstore      // []
    gas 0x20 mstore  // []
    msize 0x00 sha3  // [_start]
    0x00 mstore      // []
    0x20 0x00 return
}

/// `-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"
///    `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/
///      y==/        y==/        y==/        y==/
///    ,=,-<=`.    ,=,-<=`.    ,=,-<=`.    ,=,-<=`.
/// ,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_

/// @notice Verifies that a solution is valid for the puzzle.
/// @dev `_start` is intended to be an output from {IPuzzle-generate}.
/// @param _start The puzzle's starting position.
/// @param _solution The solution to the puzzle.
/// @return Whether the solution is valid.
#define macro VERIFY(ret_false) = takes (0) returns (0) {
    // Input:                      []
    
    0x04 calldataload           // [_start]
    0x24 calldataload           // [_solution, _start]
    
    // ----------------------------
    // PHASE 1: Dirty Bits
    // ----------------------------

    dup1 0x10 byte              // [_solution[0x10], _solution, _start]
    dup1                        // [_solution[0x10], _solution[0x10], _solution, _start]
    dup4 0x12 byte              // [_start[0x12], _solution[0x10], _solution[0x10], _solution, _start]
    and                         // [_solution[0x10] & _start[0x10], _solution[0x10], _solution, _start]
    iszero <ret_false> jumpi    // [_solution[0x10], _solution, _start]

    0x0F and                    // [_solution[0x10], _solution, _start]
    pc 0x04 shr eq              // [pc >> 0x04 == _start[0x1F] & 0x0F, _solution, _start]
    iszero <ret_false> jumpi    // [_solution, _start]
    
    // ----------------------------
    // PHASE 2: V8 Engine
    // ----------------------------

    dup1 0x80 shr 0x80 shl      // [instructions, _solution, _start]
    VM(<ret_false>)             // [_solution, _start]

    // ----------------------------
    // PHASE 3: Truffle Shuffle
    // ----------------------------

    dup2 0x00 mstore            // [_solution, _start]
    dup1 0x1E byte              // [_solution[0x1E], _solution, _start]
    0x05 0x00 dup5              // [seed, index, index_count, iters, _solution[0x1E], _solution, _start]
    MECHS__ONE_WAY_SHUFFLE(0x00, 0x20)
    pop                         // []

    0x00 mload                  // [shuffled]
    0x0F and 0x0F eq            // [shuffled & 0x0f == 0x0f]
    iszero <ret_false> jumpi
    
    // ----------------------------
    // PHASE 4: Budget Cuts
    // ----------------------------

    dup1 0x10 byte              // [_solution[0x10], _solution, _start]
    0x04 shr                    // [_solution[0x10] >> 0x04, _solution, _start]
    dup1 0x02 gt                // [_solution[0x10] >> 0x04 < 0x02, _solution[0x10], _solution, _start]
    <ret_false> jumpi           // [_solution[0x10], _solution, _start]
    gas mod                     // [gas % _solution[0x10] >> 0x04, _solution, _start]
    <ret_false> jumpi           // [_solution, _start]

    // ----------------------------
    // PHASE 5: >_ sudo su
    // ----------------------------

    dup1 0x0a byte              // [_solution[0x0a], _solution, _start]
    0x05 shl                    // [_solution[0x0a] << 0x05, _solution, _start]
    0x14 add                    // [_solution[0x0a] + 0x20, _solution, _start]
    mload                       // [_solution[_solution[0x0a] + 0x20], _solution, _start]
    0xFF eq                     // [_solution[_solution[0x0a] + 0x20] == 0xFF, _solution, _start]
    iszero <ret_false> jumpi    // [_solution, _start]

    // ----------------------------
    // PHASE 6: 31303532
    // ----------------------------

    dup1 0xFFFF 0x58 shl and    // [_solution[0x14:0x16], _solution, _start]
    0x58 shr                    // [_solution[0x14:0x16] >> 0x58, _solution, _start]
    extcodehash                 // [codehash(_solution[0x14:0x16]), _solution, _start]
    dup2 0x17 byte              // [_solution[0x17], codehash(_solution[0x14:0x16]), _solution, _start]
    shl                         // [codehash(_solution[0x14:0x16]) << _solution[0x17], _solution, _start]
    0xFFFFF and                 // [(codehash(_solution[0x14:0x16]) << _solution[0x17]) & 0xFFFFF, _solution, _start]
    0x80000 eq                  // [(codehash(_solution[0x14:0x16]) << _solution[0x17]) & 0xFFFFF == 0x80000, _solution, _start]
    iszero <ret_false> jumpi    // [_solution, _start]

    // ----------------------------
    // Finish Line
    // ----------------------------

    dup1 0x1F byte              // [_solution[0x1F], _solution, _start]
    0x00 mstore                 // [_solution, _start]
    0x20 0x00 return            // []
}

///                 __
///                / _\ #
///                \c /  #
///                / \___ #
///                \`----`#==>  
///                |  \  #
///     ,%.-"""---'`--'\#_
///    %%/             |__`\
///   .%'\     |   \   /  //
///   ,%' >   .'----\ |  [/
///      < <<`       ||
///       `\\\       ||
///         )\\      )\
/// ^^^^^^^^"""^^^^^^""^^^^^^^^^^

#define jumptable__packed VM_INSTRUCTIONS {
    muldiv bitand opshr opshl opadd
}

#define macro VM(ret_false) = takes (3) returns (0) {
    // Input: [instructions]

    0x00                               // [result, instructions]
    loop:
        __tablestart(VM_INSTRUCTIONS)  // [table_start, result, instructions]
        dup3 0x00 byte                 // [opcode, table_start, result, instructions]
        dup1 0xFF eq continue jumpi    // [opcode, table_start, result, instructions]
        dup1 0x04 lt <ret_false> jumpi // [opcode, table_start, result, instructions]

        chainid shl                    // [opcode << 1, table_start, result, instructions]
        add                            // [table_start + (opcode << 1), result, instructions]
        0x02 swap1                     // [table_start + (opcode << 1), 0x02, result, instructions]
        0x1E                           // [mem_ptr, table_start + index, 0x02, result, instructions]
        codecopy                       // [result, instructions]
        swap1                          // [instructions, result]
        0x00 mload jump                // [instructions, result]
        VM_DISPATCH()                  // [result, instructions]
        loop jump

    continue:
        // After loop:                    [opcode, table_start, result, instructions]
        pop pop                        // [result, instructions]
        dup4 0xFFFFFF and eq iszero    // [result != 0xc0ffee, instructions]
        <ret_false> jumpi              // [instructions]
        pop                            // []
}

#define macro VM_DISPATCH() = takes (1) returns (2) {
    // Input:  [instructions, result]
    muldiv:
        dup1 0x03 byte    // [d, instructions]
        dup2 0x02 byte    // [b, d, instructions]
        dup3 chainid byte // [a, b, d, instructions]

        mul               // [a * b, instructions]
        div               // [a * b / d, instructions]
 
        // Advance
        swap1             // [instructions, a * b / d]
        0x20 shl          // [instructions << 0x20, a * b / d]
        swap1             // [a * b / d, instructions]

        done jump
    bitand:
        dup1 chainid byte // [a, instructions]
        dup2 0x02 byte    // [b, a, instructions]
        and               // [a & b, instructions]

        // Advance
        swap1             // [instructions, a & b]
        0x18 shl          // [instructions << 0x18, a & b]
        swap1             // [a & b, instructions]

        done jump
    opshr:
        dup1 chainid byte // [a, instructions]
        dup2 0x02 byte    // [b, a, instructions]
        shr               // [a >> b, instructions]

        // Advance
        swap1             // [instructions, a >> b]
        0x18 shl          // [instructions << 0x18, a >> b]
        swap1             // [a >> b, instructions]

        done jump
    opshl:
        dup1 chainid byte // [a, instructions]
        dup2 0x02 byte    // [b, a, instructions]
        shl               // [a << b]

        // Advance
        swap1             // [instructions, a << b]
        0x18 shl          // [instructions << 0x18, a << b]
        swap1             // [a << b, instructions]

        done jump
    opadd:
        dup1 chainid byte // [a, instructions]
        dup1              // [a, a, instructions]
        dup3 0x02 byte    // [b, a, a, instructions]
        swap1             // [a, b, a, instructions]
        chainid swap1 sub // [a - 1, b, a, instructions]
        add               // [a - 1 + b, a, instructions]

        swap1             // [a, a + b - 1, instructions]
        0x05 shl          // [a * 32, a + b - 1, instructions]
        0x14 add          // [a * 32 + 0x14, a + b - 1, instructions]
        0xFF swap1        // [a * 32 + 0x14, 0xFF, a + b - 1, instructions]
        mstore            // [a + b - 1, instructions]

        // Advance
        swap1             // [instructions, a + b - 1]
        0x18 shl          // [instructions << 0x18, a + b - 1]
        swap1             // [a + b - 1, instructions]
    done:
        swap1 swap2 add
        // Exit: [result, instructions]
}
